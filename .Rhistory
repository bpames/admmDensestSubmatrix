densub <- function(G, m, n, tau = 0.35, gamma = 6/(sqrt(m*n)*(q-p)), opt_tol = 1.0e-4,maxiter, quiet = TRUE){
mu <- 1/tau
M <- dim(G)[1]
N <- dim(G)[2]
for(i in 1:M)
{
for(j in 1:M)
{
if(is.na(G[i,j])|(!(G[i,j] == 1 | G[i,j] == 0)))
{
stop('The argument "G" must be binary matrix')
}
}
}
if(m > M | n > N){
warning ('Dimensions of dense submatrix exceed dimensions of  initial matrix G')
}
#Initialize
W <- matrix(1L, nrow = M, ncol = N)*m*n/(M*N)
X <- W
Y <- X
Z <- X
Q <- X - Y
LambdaQ <- matrix(0L, nrow=nrow(X), ncol=ncol(X))
LambdaZ <- matrix(0L, nrow=nrow(X), ncol=ncol(X))
LambdaW <- matrix(0L, nrow=nrow(X), ncol=ncol(X))
convergence <- 0
iter <- 0
while (iter < maxiter && convergence==0){
##Update Q
Q_old <- Q
Q <- X - Y + mu*LambdaQ
Q <- Q*G
##Update X
mat<- 1/3*(Y + Q + Z + W - mu*(LambdaQ + LambdaW + LambdaZ))
X = mat_shrink(K=mat, tau=1/(3*tau))
##Update Y
A <-X - Q - gamma*matrix(1L, nrow = M, ncol = N)*mu + LambdaQ*mu
B <- matrix(0L, nrow = M, ncol = N)
Y <- pmax(A, B)
##Update W
W_old <- W
newW <- X + mu*LambdaW
alfa <- (tail(m, n=1)*tail(n, n=1) - sum(as.vector(newW)))/(M*N)
W <- newW + alfa*matrix(1L, nrow = M, ncol = N)
##Update Z
Z_old <- Z
Z <- X + mu*LambdaZ
D <- matrix(0L, M, N)
Z1 <- pmax(Z, D)
E <- matrix(1L, M, N)
Z <- pmin(Z1, E)
##Update dual variables
LambdaQ <- LambdaQ + tau*(X - Y - Q)
LambdaW <- LambdaW + tau*(X - W)
LambdaZ <- LambdaZ + tau*(X - Z)
##Check convergence
##primal
NZ <- norm(X - Z, type="F")
NW <- norm(X - W, type="F")
NQ <- norm(X - Y - Q, type="F")
errP <- max(NZ, NW, NQ)/norm(X, type="F")
##Dual feasibility
NDz <- norm(Z - Z_old, type="F")
NDw <- norm(W - W_old, type="F")
NDp <- norm(Q - Q_old, type="F")
errD <- max(NDz, NDw, NDp)/norm(X, type="F")
if(errP < opt_tol && errD < opt_tol) {
convergence=1
break
}
else {
convergence=0
}
iter <- iter +1
print(sprintf('iter: %d, primal_gap: %e, dual_gap: %e',iter, errP, errD))
}
results <- list(X=X, Y=Y)
return(results)
}
mat_shrink <- function (K, tau){
r <- dim(K)[1]
c <- dim(K)[2]
s <- svd(K, nu=r, nv=c)
# Test GITHUB CHANGES.
L <- pmax(s$d-tau,0)
if (r < c) {
K <- s$u %*% diag(L) %*% t(s$v[,1:r])
} else {
K <- s$u[,1:c] %*% diag(L) %*% t(s$v)
}
return(K)
#  return(list(K=K,L=L, s = s))
}
plantedsubmatrix <- function(M,N,m,n,p,q){
gamma<-3/((q-p)*m*n)
##Initialize G
G <- matrix(runif(M*N),M,N)
G <- ceiling(G-(1-p))
##Make dense submatrix
start_position <- matrix(runif(m*n),m,n)
G[1:m, 1:n]  <- ceiling(start_position-(1-q))
##Get X, fill the dense submatrix
X0 <- matrix(0L, nrow=M, ncol=N)
X0[1:m, 1:n] <- matrix(1L, nrow=m, ncol=n)
##Get Y
Y0 <- matrix(0L, nrow=M, ncol=N)
Y0[1:m,1:n] <- matrix(1L, nrow=m,ncol=n) - G[1:m,1:n]
my_list<-list(sampled_matrix = G, dense_submatrix = X0, disagreements = Y0) #G is sampledmatrix, X0 is dense, Y0 is number of disagr
return (my_list)
}
M=100 #number of rows of sampled matrix
N=200 #number of columns of sampled matrix
m=50 #number of rows of dense submatrix
n=40 #number of columns of dense submatrix
p=0.25 # noise density
q=0.85 #in-group density
#Make binary matrix with mn-submatrix
random<-plantedsubmatrix(M=M, N=N,m=m,n=n,p=p,q=q)
image(random$sampled_matrix, useRaster=TRUE, axes=FALSE, main = "Matrix A")
image(random$dense_submatrix, useRaster=TRUE, axes=FALSE, main = "Matrix X0")
image(random$disagreements, useRaster=TRUE, axes=FALSE, main = "Matrix Y0")
admm<-densub(G=random$sampled_matrix, m=m, n=n, tau = 0.35, gamma = 6/(sqrt(m*n)*(q-p)), opt_tol = 1.0e-4,maxiter=500, quiet = TRUE)
image(admm$X, useRaster=TRUE, axes=FALSE, main = "Matrix X")
image(admm$Y, useRaster=TRUE, axes=FALSE, main = "Matrix Y")
load(file="JAZZ.RData")
setwd("~/admmDensenstSubmatrix/Examples")
load(file="JAZZ.RData")
plot(simplify(new), vertex.size= 0.01,edge.arrow.size=0.001,vertex.label.cex = 0.75,vertex.label.color = "black"  ,vertex.frame.color = adjustcolor("white", alpha.f = 0),vertex.color = adjustcolor("white", alpha.f = 0),edge.color=adjustcolor(1, alpha.f = 0.15),display.isolates=FALSE,vertex.label=ifelse(page_rank(g)$vector > 0.1 , "important nodes", NA))
install.packages("GGally")
library(GGally)
library(network)
library(sna)
library(ggplot2)
ggnet2(new)
quartz()
gplot(new,gmode="graph")
quartz()
gplot(new,gmode="graph")
quartz()
gplot(new,gmode="graph")
quartz()
gplot(new,gmode="graph")
quartz()
gplot(new,gmode="graph")
quartz()
gplot(new,gmode="graph")
load(file="JAZZ.RData")
G=new #define matrix G equivalent to JAZZ dataset
m=100 #clique size or the number of rows of the dense submatrix
n=100 #clique size of the number of columns of the dense sumbatrix
tau=0.85 #regularization parameter
opt_tol=1.0e-2 #optimal tolerance
verbose=1
maxiter=2000 #number of iterations
gamma=8/n #regularization parameter
#call ADMM solver
admm <- densub(G = G, m = m, n = n, tau = tau, gamma = gamma, opt_tol = opt_tol, maxiter=maxiter, quiet = TRUE)
# Planted solution X0.
X0=matrix(0L, nrow=198, ncol=198) #construct rank-one matrix X0
X0[1:100,1:100]=matrix(1L, nrow=100, ncol=100)#define dense block
# Planted solution Y0.
Y0=matrix(0L, nrow=198, ncol=198) #construct matrix for counting disagreements between G and X0
Y0[1:100,1:100]=matrix(1L,nrow=100,ncol=1000)-G[1:100,1:100]
#Check primal and dual residuals.
C=admm$X-X0
a=norm(C, "F") #Frobenius norm of matrix C
b=norm(X0,"F") #Frobenius norm of matrix X0
recovery = matrix(0L,nrow=1, ncol=1)#create recovery matrix
if (a/b^2<opt_tol){
recovery=recovery+1
} else {
recovery=0 #Recovery condition
}
library(ADMMdensesubmatrix )
library(ADMMdensesubmatrix )
saveRDS(version = 2)
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Initialize problem size and densities
# You can play around with these parameters
M=100 #number of rows of sampled matrix
N=200 #number of columns of sampled matrix
m=50 #number of rows of dense submatrix
n=40 #number of columns of dense submatrix
p=0.25 # noise density
q=0.85 #in-group density
#Make binary matrix with mn-submatrix
random<-plantedsubmatrix(M=M, N=N,m=m,n=n,p=p,q=q)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Plot sampled G and matrix representations.
image(random$sampled_matrix, useRaster=TRUE, axes=FALSE, main = "Matrix A")
image(random$dense_submatrix, useRaster=TRUE, axes=FALSE, main = "Matrix X0")
image(random$disagreements, useRaster=TRUE, axes=FALSE, main = "Matrix Y0")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ADMMdensesubmatrix )
install.packages("devtools")
library(devtools)
install_github("admmDensenstSubmatrix")
install_github(admmDensenstSubmatrix)
library(ADMMdensesubmatrix )
remove.packages("ADMMdensesubmatrix")
library(ADMMdensesubmatrix )
devtools::install(build_vignettes = TRUE)
library(ADMMdensesubmatrix )
devtools::install(build_vignettes = TRUE)
library(ADMMdensesubmatrix )
devtools::install()
